<?xml version="1.0" ?>
<ns1:bibi xmlns:ns1="http://schemas.humanbrainproject.eu/SP10/2014/BIBI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<ns1:brainModel>
		<ns1:file>idle_brain.py</ns1:file>
		<ns1:populations from="0" population="neurons" to="2" xsi:type="ns1:Range"/>
	</ns1:brainModel>
	<ns1:bodyModel>arm_robot.sdf</ns1:bodyModel>
	<ns1:transferFunction xsi:type="ns1:PythonTransferFunction">
    #
    # This specifies that the neurons 0 to 2 of the circuit population
    # should be monitored. You can see them in the spike train widget
    @nrp.NeuronMonitor(nrp.brain.neurons, nrp.spike_recorder)
    def all_neurons_spike_monitor(t):
        # Uncomment to log into the 'log-console' visible in the simulation
        # clientLogger.info(&quot;Time: &quot;, t)
        return True
    #
  </ns1:transferFunction>
	<ns1:transferFunction xsi:type="ns1:PythonTransferFunction">
    #
    @nrp.MapSpikeSink(&quot;output_neuron&quot;, nrp.brain.neurons[1], nrp.leaky_integrator_alpha)
    @nrp.Neuron2Robot(Topic('/robot/hollie_real_left_arm_1_joint/cmd_pos', std_msgs.msg.Float64))
    # Example TF: get output neuron voltage and actuate the arm with the current simulation time. You could do something with the voltage here and command the robot accordingly.
    def turn_around(t, output_neuron):
        voltage=output_neuron.voltage
        return std_msgs.msg.Float64(t)
    #
  </ns1:transferFunction>
	<ns1:transferFunction xsi:type="ns1:PythonTransferFunction">
    #
    @nrp.MapSpikeSource(&quot;input_neuron&quot;, nrp.brain.neurons[0], nrp.poisson)
    @nrp.Robot2Neuron()
    def set_neuron_rate(t, input_neuron):
        input_neuron.rate = 10
    #
  </ns1:transferFunction>
#
  </ns1:transferFunction>
	<ns1:transferFunction xsi:type="ns1:PythonTransferFunction">
#
    @nrp.MapSpikeSink(&quot;output_neuron&quot;, nrp.brain.neurons[1], nrp.leaky_integrator_alpha)
    @nrp.Neuron2Robot(Topic('/robot/hollie_real_left_arm_1_joint/cmd_pos', std_msgs.msg.Float64))
    # Example TF: get output neuron voltage and actuate the arm with the current simulation time. You could do something with the voltage here and command the robot accordingly.
    def turn_around(t, output_neuron):
        voltage=output_neuron.voltage
        return std_msgs.msg.Float64(t)
    #
  </ns1:transferFunction>
</ns1:bibi>
